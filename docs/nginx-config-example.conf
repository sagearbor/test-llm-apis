# NGINX Configuration for LLM Test App
# File location: /etc/nginx/sites-available/llm-test (or /etc/nginx/conf.d/)
#
# After creating this file:
# 1. Update SSL certificate paths
# 2. sudo nginx -t (test config)
# 3. sudo ln -s /etc/nginx/sites-available/llm-test /etc/nginx/sites-enabled/
# 4. sudo systemctl reload nginx

# Rate limiting zone (prevents abuse)
# Place this OUTSIDE the server block, at the top of the file or in nginx.conf
limit_req_zone $binary_remote_addr zone=llm_limit:10m rate=10r/s;

server {
    # Listen on port 3060 with SSL and HTTP/2
    listen 3060 ssl http2;
    listen [::]:3060 ssl http2;

    # Server name
    server_name alp-dsvm-003.azure.dhe.duke.edu;

    # ====================================
    # SSL Configuration
    # ====================================
    # IMPORTANT: Update these paths to point to your actual Duke SSL certificates
    # Common locations to check:
    #   /etc/ssl/certs/duke-cert.crt
    #   /etc/pki/tls/certs/
    #   /etc/nginx/ssl/

    ssl_certificate /path/to/your/certificate.crt;
    ssl_certificate_key /path/to/your/private-key.key;

    # SSL Protocols and Ciphers (secure configuration)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    # SSL Session Configuration (improves performance)
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP Stapling (improves SSL performance)
    ssl_stapling on;
    ssl_stapling_verify on;
    # ssl_trusted_certificate /path/to/chain.pem;

    # ====================================
    # Security Headers
    # ====================================

    # HTTP Strict Transport Security (HSTS)
    # Forces browsers to only use HTTPS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Prevent clickjacking
    add_header X-Frame-Options "SAMEORIGIN" always;

    # Prevent MIME type sniffing
    add_header X-Content-Type-Options "nosniff" always;

    # XSS Protection
    add_header X-XSS-Protection "1; mode=block" always;

    # Referrer Policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Content Security Policy (adjust as needed)
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://login.microsoftonline.com https://ai-sandbox-instance.openai.azure.com;" always;

    # Permissions Policy (formerly Feature Policy)
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # ====================================
    # Rate Limiting
    # ====================================
    # Limit to 10 requests per second per IP, with burst of 20
    limit_req zone=llm_limit burst=20 nodelay;
    limit_req_status 429;

    # ====================================
    # Logging
    # ====================================
    access_log /var/log/nginx/llm-test-access.log combined;
    error_log /var/log/nginx/llm-test-error.log warn;

    # ====================================
    # Client Upload Limits
    # ====================================
    client_max_body_size 1M;
    client_body_timeout 12;
    client_header_timeout 12;

    # ====================================
    # Proxy Configuration
    # ====================================
    location / {
        # Proxy to Node.js application
        proxy_pass http://localhost:3000;

        # HTTP version
        proxy_http_version 1.1;

        # WebSocket support (if needed)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # Pass real client info to application
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # Timeouts
        proxy_connect_timeout 75s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # Don't cache
        proxy_cache_bypass $http_upgrade;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # ====================================
    # Health Check Endpoint (Optional)
    # ====================================
    # Allow health checks without rate limiting
    location = /health {
        proxy_pass http://localhost:3000/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;

        # No rate limit for health checks
        limit_req off;

        # Quick timeout for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }

    # ====================================
    # Static Assets (if any)
    # ====================================
    # Cache static assets if app serves any
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        proxy_pass http://localhost:3000;
        expires 1h;
        add_header Cache-Control "public, immutable";
    }

    # ====================================
    # Security: Block hidden files
    # ====================================
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # ====================================
    # Custom Error Pages (Optional)
    # ====================================
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# ====================================
# Optional: Redirect HTTP to HTTPS
# ====================================
# Uncomment if you want to reject HTTP entirely
# server {
#     listen 3060;
#     listen [::]:3060;
#     server_name alp-dsvm-003.azure.dhe.duke.edu;
#     return 301 https://$server_name$request_uri;
# }
